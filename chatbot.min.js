// document.addEventListener("DOMContentLoaded", () => { const e = document.getElementById("chatContainer"), t = document.getElementById("chatMessages"), n = document.getElementById("userInput"), a = document.getElementById("sendButton"), s = document.getElementById("chatWidgetButton"), c = document.getElementById("closeButton"); function o(e, n = !1) { const a = document.createElement("div"); a.className = n ? "message user-message" : "message bot-message", a.innerHTML = `<p>${n ? e.replace(/\n/g, "<br>") : e}</p>`, t.appendChild(a), t.scrollTop = t.scrollHeight } async function i(e) { try { const t = await fetch("https://chatbot-q8b5.onrender.com/api/chat", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ input_value: e, output_type: "chat", input_type: "chat" }) }), n = await t.json(); return console.log("Data is:", n.result), "object" == typeof n.result && n.result && n.result[0].outputs[0].messages[0].message ? n.result[0].outputs[0].messages[0].message : n.result } catch (e) { return console.error("API Error:", e), "Oops! Something went wrong while contacting the server." } } function l(e) { const n = e.split("\n").filter(e => e.trim().startsWith("|")), a = []; for (let e = 2; e < n.length; e++) { const s = n[e].split("|").map(e => e.trim()), c = s[1]?.replace(/\*\*/g, "") || "", o = s[2]?.replace(/\*\*/g, "") || ""; c && o && a.push(`<strong>${c}</strong><br>${o}`) } return a.join("<br><br>") } async function d() { const e = n.value.trim(); if ("" !== e) { o(e, !0), n.value = ""; const a = document.createElement("div"); a.className = "message bot-message", a.innerHTML = "<p>Typing...</p>", t.appendChild(a), t.scrollTop = t.scrollHeight; const s = await i(e), c = l(s); t.removeChild(a), o(c) } } s.addEventListener("click", () => { e.classList.add("active"), n.focus() }), c.addEventListener("click", () => { e.classList.remove("active") }), a.addEventListener("click", d), n.addEventListener("keypress", e => { "Enter" === e.key && d() }) });

// document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("chatContainer"),t=document.getElementById("chatMessages"),n=document.getElementById("userInput"),a=document.getElementById("sendButton"),s=document.getElementById("chatWidgetButton"),c=document.getElementById("closeButton");function o(e,n=!1){const a=document.createElement("div");a.className=n?"message user-message":"message bot-message",a.innerHTML=`<p>${n?e.replace(/\n/g,"<br>"):e}</p>`,t.appendChild(a),t.scrollTop=t.scrollHeight}async function i(e){try{const a="https://chatbot-q8b5.onrender.com/api/chat";console.log("Sending request to:",a);const t=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({input_value:e,output_type:"chat",input_type:"chat"})}),n=await t.json();return console.log("Response received:",n),typeof n.result=="object"&&n.result?.[0]?.outputs?.[0]?.messages?.[0]?.message?n.result[0].outputs[0].messages[0].message:n.result}catch(e){return console.error("API Error:",e),"Oops! Something went wrong while contacting the server."}}function l(e){const n=e.split("\n").filter(e=>e.trim().startsWith("|")),a=[];for(let e=2;e<n.length;e++){const s=n[e].split("|").map(e=>e.trim()),c=s[1]?.replace(/\*\*/g,"")||"",o=s[2]?.replace(/\*\*/g,"")||"";c&&o&&a.push(`<strong>${c}</strong><br>${o}`)}return a.join("<br><br>")}async function d(){const e=n.value.trim();if(e!==""){o(e,!0),n.value="";const a=document.createElement("div");a.className="message bot-message",a.innerHTML="<p>Typing...</p>",t.appendChild(a),t.scrollTop=t.scrollHeight;const s=await i(e),c=l(s);t.removeChild(a),o(c)}}s.addEventListener("click",()=>{e.classList.add("active"),n.focus()}),c.addEventListener("click",()=>{e.classList.remove("active")}),a.addEventListener("click",d),n.addEventListener("keypress",e=>{"Enter"===e.key&&d()})});

// document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("chatContainer"),t=document.getElementById("chatMessages"),n=document.getElementById("userInput"),a=document.getElementById("sendButton"),s=document.getElementById("chatWidgetButton"),c=document.getElementById("closeButton");function o(e,n=!1){const a=document.createElement("div");a.className=n?"message user-message":"message bot-message",a.innerHTML=`<p>${n?e.replace(/\n/g,"<br>"):e}</p>`,t.appendChild(a),t.scrollTop=t.scrollHeight}async function i(e){try{const a="https://chatbot-q8b5.onrender.com/api/chat";console.log("Sending request to:",a);const t=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({input_value:e,output_type:"chat",input_type:"chat"})}),n=await t.json();return console.log("Response received:",n),typeof n.result=="object"&&n.result?.[0]?.outputs?.[0]?.messages?.[0]?.message?n.result[0].outputs[0].messages[0].message:n.result}catch(e){return console.error("API Error:",e),"Oops! Something went wrong while contacting the server."}}function l(e){const n=e.split("\n").filter(e=>e.trim().startsWith("|")),a=[];for(let e=2;e<n.length;e++){const s=n[e].split("|").map(e=>e.trim()),c=s[1]?.replace(/\*\*/g,"")||"",o=s[2]?.replace(/\*\*/g,"")||"";c&&o&&a.push(`<strong>${c}</strong><br>${o}`)}return a.join("<br><br>")}async function d(){const e=n.value.trim();if(e!==""){o(e,!0),n.value="";const a=document.createElement("div");a.className="message bot-message",a.innerHTML="<p>Typing...</p>",t.appendChild(a),t.scrollTop=t.scrollHeight;const s=await i(e);t.removeChild(a);let c;c=s&&s.trim().startsWith("|")?l(s):s;o(c)}}s.addEventListener("click",()=>{e.classList.add("active"),n.focus()}),c.addEventListener("click",()=>{e.classList.remove("active")}),a.addEventListener("click",d),n.addEventListener("keypress",e=>{"Enter"===e.key&&d()})});
document.addEventListener("DOMContentLoaded", () => {
    // Get necessary DOM elements
    const chatContainer = document.getElementById("chatContainer"),
          chatMessages = document.getElementById("chatMessages"),
          userInput = document.getElementById("userInput"),
          sendButton = document.getElementById("sendButton"),
          chatWidgetButton = document.getElementById("chatWidgetButton"),
          closeButton = document.getElementById("closeButton");

    // Function to display messages in chat window
    function displayMessage(message, isUserMessage = false) {
        const messageElement = document.createElement("div");
        messageElement.className = isUserMessage ? "message user-message" : "message bot-message";
        messageElement.innerHTML = `<p>${isUserMessage ? message.replace(/\n/g, "<br>") : message}</p>`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom
    }

    // Function to handle API request
    async function getBotResponse(input) {
        try {
            const apiUrl = "https://chatbot-q8b5.onrender.com/api/chat";
            console.log("Sending request to:", apiUrl);
            const response = await fetch(apiUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    input_value: input,
                    output_type: "chat",
                    input_type: "chat"
                })
            });
            const result = await response.json();
            console.log("Response received:", result);

            // Check if the response contains valid message
            return typeof result.result == "object" && result.result?.[0]?.outputs?.[0]?.messages?.[0]?.message
                ? result.result[0].outputs[0].messages[0].message
                : result.result;
        } catch (error) {
            console.error("API Error:", error);
            return "Oops! Something went wrong while contacting the server.";
        }
    }

    // Function to convert pipe-separated text into an HTML table
    function convertToTable(pipeText) {
        const lines = pipeText.split("\n").filter(line => line.trim().startsWith("|"));
        let tableHTML = "<table border='1' style='width:100%; border-collapse: collapse;'>";

        // Add table headers
        tableHTML += "<tr>";
        const headers = lines[0].split("|").map(item => item.trim());
        headers.forEach(header => {
            tableHTML += `<th style='padding: 8px; text-align: left;'>${header}</th>`;
        });
        tableHTML += "</tr>";

        // Add table rows
        for (let i = 2; i < lines.length; i++) {
            const row = lines[i].split("|").map(item => item.trim());
            tableHTML += "<tr>";
            row.forEach(cell => {
                tableHTML += `<td style='padding: 8px;'>${cell.replace(/\*\*/g, "")}</td>`; // Remove bold markdown
            });
            tableHTML += "</tr>";
        }

        tableHTML += "</table>";
        return tableHTML;
    }

    // Function to handle user input and send it to the chatbot
    async function sendUserMessage() {
        const userMessage = userInput.value.trim();
        if (userMessage !== "") {
            displayMessage(userMessage, true); // Display user message
            userInput.value = ""; // Clear input field

            // Display "typing..." message
            const typingMessage = document.createElement("div");
            typingMessage.className = "message bot-message";
            typingMessage.innerHTML = "<p>Typing...</p>";
            chatMessages.appendChild(typingMessage);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // Get response from the chatbot API
            const botResponse = await getBotResponse(userMessage);
            chatMessages.removeChild(typingMessage); // Remove "typing..." message

            // Process response (convert to table if needed)
            let responseContent = botResponse && botResponse.trim().startsWith("|") 
                                  ? convertToTable(botResponse) 
                                  : botResponse;
            displayMessage(responseContent); // Display bot response
        }
    }

    // Event listeners for chat UI interactions
    chatWidgetButton.addEventListener("click", () => {
        chatContainer.classList.add("active");
        userInput.focus();
    });

    closeButton.addEventListener("click", () => {
        chatContainer.classList.remove("active");
    });

    sendButton.addEventListener("click", sendUserMessage);

    userInput.addEventListener("keypress", event => {
        if (event.key === "Enter") {
            sendUserMessage();
        }
    });
});
